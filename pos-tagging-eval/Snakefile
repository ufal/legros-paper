legros_home = "../legros"
intrinsic_eval_home = "../intrinsic-segmentation-eval"

include: "{}/Snakefile".format(intrinsic_eval_home)

pos_langs = ["cs", "en", "es", "fr", "hu", "it", "ru"]
seeds = list(range(1, 11))

experiments = [
    "orig-word-none-00k",
    "orig-morf-none-00k",
    "orig-word-bpe-32k",
    "bigram-word-bpe-32k",
    "orig-word-spm-32k",
    "bigram-word-spm-32k",
    "orig-morf-bpe-32k",
    "bigram-morf-bpe-32k",
    "orig-morf-spm-32k",
    "bigram-morf-spm-32k"
]

# experiment - segm - pretok
tagger_flags = {
    ("orig", "none", "word"): "",
    ("orig", "none", "morf"): "--morfessor {input[morfessor_model]}",
    ("orig", "none", "char"): "--subwords char",

    ("orig", "bpe", "word"): "--subwords bpe --subword-model {input[subword_model]}",
    ("orig", "bpe", "morf"): "--subwords bpe --subword-model {input[subword_model]} --morfessor {input[morfessor_model]}",
    ("orig", "spm", "word"): "--subwords sp --subword-model {input[subword_model]}",
    ("orig", "spm", "morf"): "--subwords sp --subword-model {input[subword_model]} --morfessor {input[morfessor_model]}",

    ("bigram", "bpe", "word"): "--subwords bigram --subword-model {input[subword_model]}",
    ("bigram", "bpe", "morf"): "--subwords bigram --subword-model {input[subword_model]}",
    ("bigram", "spm", "word"): "--subwords bigram --subword-model {input[subword_model]}",
    ("bigram", "spm", "morf"): "--subwords bigram --subword-model {input[subword_model]}"
}


rule all_pos_evaluation:
    input: "results-mean.csv", "results-std.csv"

        
def get_tagger_flags(wildcards):
    inputs = resolve_tagger_inputs(wildcards)
    flags = tagger_flags[(wildcards.experiment, wildcards.segm, wildcards.pretok)]
    return flags.format(input=inputs)

        
def resolve_tagger_inputs(wildcards):
    inputs = {}
    lnghome = f"{intrinsic_eval_home}/{wildcards.lng}"

    if wildcards.pretok == "morf" and wildcards.experiment == "orig":
        inputs["morfessor_model"] = f"{lnghome}/morfessor/model.bin"

    if wildcards.experiment == "orig" and wildcards.segm != "none":
        inputs["subword_model"] =f"{lnghome}/{wildcards.segm}/{wildcards.lng}.{wildcards.pretok}-{wildcards.segm}{wildcards.size_k}" 
        if wildcards.segm == "spm":
            inputs["subword_model"] += ".model"

    if wildcards.experiment == "bigram" and wildcards.segm != "none":
        inputs["subword_model"] =  f"{lnghome}/experiments/from_{wildcards.pretok}-{wildcards.segm}-{wildcards.size_k}k/bigram_stats"

    return inputs


rule run_tagger:
    input: unpack(resolve_tagger_inputs)
    output: protected("experiments/pos-{lng}-{experiment}-{pretok}-{segm}-{size_k}k-{seed}.out")
    wildcard_constraints:
        pretok="word|morf|char",
        segm="bpe|spm|none",
        experiment="orig|bigram"
    params:
        flags=get_tagger_flags
    resources:
        mem="16G",
        partition="gpu-troja,gpu-ms",
        flags="--gres=gpu:1 --constraint='gpuram16G|gpuram24G|gpuram48G'"
    shell:
        """
        mkdir -p experiments
        PYTHONPATH={legros_home}/python python pos_tagger.py {wildcards.lng} {params.flags} \
            --seed {wildcards.seed} 2>&1 | tee {output}
        """


rule collect_results_mean:
    input:
        expand("experiments/pos-{lng}-{experiment}-{seed}.out",
               lng=pos_langs,
               experiment=experiments,
               seed=seeds)
    output: "results-mean.csv"
    shell:
        """
        for TYPE in {experiments}; do
            for LNG in {pos_langs}; do
                grep 'Accuracy' experiments/pos-$LNG-$TYPE-*.out | \
                    sed -e "s/.*Accuracy: //;s/%.*//;" | \
                    awk '{{ total += $1; count++ }} END {{ print total/count }}' | \
                    tr '\n' ','
            done
            echo
        done | sed -e 's/,$//' > {output}
        """


rule collect_results_std:
    input:
        expand("experiments/pos-{lng}-{experiment}-{seed}.out",
               lng=pos_langs,
               experiment=experiments,
               seed=seeds)
    output: "results-std.csv"
    shell:
        """
        for TYPE in {experiments}; do
            for LNG in {pos_langs}; do
                grep 'Accuracy' experiments/pos-$LNG-$TYPE-*.out | \
                    sed -e "s/.*Accuracy: //;s/%.*//;" | \
                    awk '{{ total += $1; square += $1*$1; count++ }} END {{ print sqrt(square/count - (total/count)**2) }}' | \
                    tr '\n' ','
            done
            echo
        done | sed -e 's/,$//' > {output}
        """
